org: eventbuizz
app: eventbuizz
service: eventbuizz
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage,'stage'} # Set the default stage used. Default is dev
  region: eu-west-1 # Overwrite the default region used. Default is us-east-1
  profile: production # The default profile to use with this service
  memorySize: 1024 # Overwrite the default memory size. Default is 1024
  # Environment Variables
  environment:
    AWS_ACCOUNT_ID: ${self:custom.AWS_ACCOUNT_ID.${self:provider.stage}}
    AWS_SPARKPOST_QUEUE: ${self:custom.AWS_SPARKPOST_QUEUE.${self:provider.stage}}
    AWS_REQUEST_TO_SPEAK_QUEUE: ${self:custom.AWS_REQUEST_TO_SPEAK_QUEUE.${self:provider.stage}}
    AWS_REQUEST_TO_SPEAK_BUCKET: ${self:custom.AWS_REQUEST_TO_SPEAK_BUCKET.${self:provider.stage}}

resources:
  Resources:
    ModuslandBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: speakerlist-sqs-messages
        AccessControl: PublicRead
    UploadRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: upload-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - s3:PutObject
                    - s3:PutObjectAcl
                  Resource: !Sub
                    - "arn:aws:s3:::${BucketName}/*"
                    - { BucketName: !Ref ModuslandBucket }
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    Fn::Sub:
                      - arn:aws:logs:${self:provider.region}:${self:custom.AWS_ACCOUNT_ID}:log-group:/aws/lambda/*:*:*
                      - {
                          Region: !Ref AWS::Region,
                          AccountId: !Ref AWS::AccountId,
                        }

functions:
  api:
    handler: handler.handler
    events:
      - httpApi: "*"
      - Aws.Sqs: arn:aws:iam::056936973133:role/lambda_basic_execution

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 4002
  stages:
    - dev
    - stage
    - prod
  AWS_ACCOUNT_ID:
    local: "056936973133"
    dev: "056936973133"
    stage: "056936973133"
    prod: "056936973133"
  AWS_SPARKPOST_QUEUE:
    local: "stage_sparkpost_queue"
    dev: "dev_sparkpost_queue"
    stage: "stage_sparkpost_queue"
    prod: "sparkpost_queue"
  AWS_REQUEST_TO_SPEAK_QUEUE:
    local: "stage_request_to_speak_queue.fifo"
    dev: "dev_request_to_speak_queue.fifo"
    stage: "stage_request_to_speak_queue.fifo"
    prod: "request_to_speak_queue.fifo"
  AWS_REQUEST_TO_SPEAK_BUCKET:
    local: "speakerlist-sqs-messages"
    dev: "speakerlist-sqs-messages"
    stage: "speakerlist-sqs-messages"
    prod: "speakerlist-sqs-messages"
